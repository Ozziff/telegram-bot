#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Telegram bot implementation for a beer selection bot.
Includes text responses and image sending capabilities.
"""

import os
import logging
import random
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# Set higher logging level for httpx to avoid excessive logs
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# Get token from environment variable
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
if not BOT_TOKEN:
    logger.error("Bot token not found. Please set the BOT_TOKEN environment variable.")
    exit(1)

# Simple web server to keep Render happy
def run_web_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Pivnoi Vopros Bot is running!')
            
        def log_message(self, format, *args):
            # Suppress log messages to console
            return
    
    # Use the PORT environment variable that Render sets
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(('0.0.0.0', port), Handler)
    logger.info(f"Starting web server on port {port}")
    server.serve_forever()

# Command handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message when the command /start is issued."""
    user = update.effective_user
    keyboard = [[InlineKeyboardButton("–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É, —Å—Ç–∞–ª–∫–µ—Ä", callback_data="try_luck")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, —Å—Ç–∞–ª–∫–µ—Ä. –ó–∞–º–æ—Ç–∞–ª—Å—è? –ü—Ä–∏—Å—è–¥—å, –≤—ã–ø–µ–π –∫—Ä—É–∂–µ—á–∫—É —Ö–æ–ª–æ–¥–Ω–µ–Ω—å–∫–æ–≥–æ. –°–µ–π—á–∞—Å —Å–¥–µ–ª–∞–µ–º —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É –∏–∑ 6 –∑–µ–ª–∏–π.",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a help message when the command /help is issued."""
    help_text = (
        "–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–ø—Ü–∏–π\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø–∏–≤–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å!"
    )
    await update.message.reply_text(help_text)

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Display a menu of options with inline keyboard."""
    keyboard = [
        [
            InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–∏–≤–∞", callback_data="history"),
            InlineKeyboardButton("–í–∏–¥—ã –ø–∏–≤–∞", callback_data="types")
        ],
        [
            InlineKeyboardButton("–ü—Ä–æ—Ü–µ—Å—Å –≤–∞—Ä–∫–∏", callback_data="brewing"),
            InlineKeyboardButton("–ö—É–ª—å—Ç—É—Ä–∞ –ø–∏—Ç–∏—è", callback_data="culture")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button presses from inline keyboard."""
    query = update.callback_query
    await query.answer()

    if query.data == "try_luck":
        # List of beers
        beers = ["–ö—Ä—É—à–æ–≤–∏—Ü–∞", "–ñ–∞—Ç–µ—Ü–∫–∏–π –≥—É—Å—å", "–•–∞–º–æ–≤–Ω–∏–∫–∏ –≤–µ–Ω—Å–∫–æ–µ", 
                 "–•–∞–º–æ–≤–Ω–∏–∫–∏ –ø–∏–ª—å–∑–µ–Ω—Å–∫–æ–µ", "–ö–æ–∑–µ–ª"]
        
        # Randomly select beers with 30% chance of –ñ–∏–≥—É–ª–∏ –±–∞—Ä–Ω–æ–µ
        selected_beers = []
        for _ in range(6):
            if random.random() < 0.3:  # 30% chance for –ñ–∏–≥—É–ª–∏ –±–∞—Ä–Ω–æ–µ
                selected_beers.append("–ñ–∏–≥—É–ª–∏ –±–∞—Ä–Ω–æ–µ")
            else:
                selected_beers.append(random.choice(beers))
        
        # Count how many "–ñ–∏–≥—É–ª–∏ –±–∞—Ä–Ω–æ–µ" we have
        zhiguli_count = selected_beers.count("–ñ–∏–≥—É–ª–∏ –±–∞—Ä–Ω–æ–µ")
        
        # Create a formatted message
        beer_message = "–¢–≤–æ–π –≤—ã–±–æ—Ä, —Å—Ç–∞–ª–∫–µ—Ä üç∫:\n\n"
        for i, beer in enumerate(selected_beers, 1):
            beer_message += f"{i}. {beer}\n"
        
        beer_message += "\n–ù–µ –¥–∞–π –ó–æ–Ω–µ —Å–µ–±—è –ø–æ–±–µ–¥–∏—Ç—å! ‚ò¢Ô∏è"
        
        # First send the text message
        await query.edit_message_text(text=beer_message)
        
        # Then send appropriate image based on Zhiguli count
        chat_id = query.message.chat_id
        if zhiguli_count >= 3:
            # Send happy Zhiguli image
            with open('zhiguli_happy.png', 'rb') as photo:
                await context.bot.send_photo(chat_id=chat_id, photo=photo)
        else:
            # Send sad Zhiguli image
            with open('zhiguli_sad.png', 'rb') as photo:
                await context.bot.send_photo(chat_id=chat_id, photo=photo)
        
        return

    # Map callback data to text responses for other buttons
    responses = {
        "history": "–ò—Å—Ç–æ—Ä–∏—è –ø–∏–≤–∞ –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—ã—Å—è—á–∏ –ª–µ—Ç. –ü–µ—Ä–≤—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω–∏–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –¥—Ä–µ–≤–Ω–∏–º —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è–º –ú–µ—Å–æ–ø–æ—Ç–∞–º–∏–∏ –∏ –ï–≥–∏–ø—Ç–∞. –ü–∏–≤–æ –±—ã–ª–æ –≤–∞–∂–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º –ø–∏—Ç–∞–Ω–∏—è –∏ —á–∞—Å—Ç—å—é –∫—É–ª—å—Ç—É—Ä—ã –º–Ω–æ–≥–∏—Ö –Ω–∞—Ä–æ–¥–æ–≤.",
        
        "types": "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥—ã –ø–∏–≤–∞:\n- –≠–ª—å (–≤–µ—Ä—Ö–æ–≤–æ–µ –±—Ä–æ–∂–µ–Ω–∏–µ)\n- –õ–∞–≥–µ—Ä (–Ω–∏–∑–æ–≤–æ–µ –±—Ä–æ–∂–µ–Ω–∏–µ)\n- –ü–æ—Ä—Ç–µ—Ä –∏ —Å—Ç–∞—É—Ç\n- –ü—à–µ–Ω–∏—á–Ω–æ–µ –ø–∏–≤–æ\n- IPA (India Pale Ale)\n- –õ–∞–º–±–∏–∫ (—Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ –±—Ä–æ–∂–µ–Ω–∏–µ)\n–ö–∞–∂–¥—ã–π –≤–∏–¥ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∫—É—Å–∞, –∞—Ä–æ–º–∞—Ç–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.",
        
        "brewing": "–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –ø–∏–≤–æ–≤–∞—Ä–µ–Ω–∏—è:\n1. –°–æ–ª–æ–∂–µ–Ω–∏–µ –∑–µ—Ä–Ω–∞\n2. –ó–∞—Ç–∏—Ä–∞–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è\n3. –í–∞—Ä–∫–∞ —Å—É—Å–ª–∞ —Å —Ö–º–µ–ª–µ–º\n4. –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ —Å—É—Å–ª–∞\n5. –§–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏—è (–±—Ä–æ–∂–µ–Ω–∏–µ)\n6. –°–æ–∑—Ä–µ–≤–∞–Ω–∏–µ –ø–∏–≤–∞\n7. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–æ–∑–ª–∏–≤\n–ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.",
        
        "culture": "–ö—É–ª—å—Ç—É—Ä–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∏–≤–∞ —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º. –í –ì–µ—Ä–º–∞–Ω–∏–∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã –ø–∏–≤–Ω—ã–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –û–∫—Ç–æ–±–µ—Ä—Ñ–µ—Å—Ç. –í –ë–µ–ª—å–≥–∏–∏ –∫–∞–∂–¥—ã–π —Å–æ—Ä—Ç –ø–∏–≤–∞ –ø–æ–¥–∞–µ—Ç—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ. –í –ß–µ—Ö–∏–∏ –ø–∏–≤–æ - –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç–æ—è–Ω–∏–µ. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∏ –∑–Ω–∞–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–π –æ–±–æ–≥–∞—â–∞–µ—Ç –æ–ø—ã—Ç –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è —ç—Ç–∏–º –Ω–∞–ø–∏—Ç–∫–æ–º."
    }

    # Send the appropriate text response based on callback data
    if query.data in responses:
        await query.edit_message_text(text=responses[query.data])
    else:
        await query.edit_message_text(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle regular text messages from users."""
    text = update.message.text.lower()
    
    # Simple keyword-based responses
    if "–ø—Ä–∏–≤–µ—Ç" in text or "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π" in text:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
    
    elif any(word in text for word in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä"]):
        await update.message.reply_text("–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!")
    
    elif any(word in text for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]):
        await update.message.reply_text("–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! –ù–∞–¥–µ—é—Å—å, –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω.")
    
    # Beer related questions
    elif "ipa" in text or "–∏–ø–∞" in text:
        await update.message.reply_text(
            "India Pale Ale (IPA) - —ç—Ç–æ —Å–æ—Ä—Ç –ø–∏–≤–∞ —Å —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º —Ö–º–µ–ª–µ–≤—ã–º –≤–∫—É—Å–æ–º –∏ –∞—Ä–æ–º–∞—Ç–æ–º. "
            "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –ò–Ω–¥–∏—é, –æ—Ç—Å—é–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ. "
            "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —Ö–º–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–∞–∫ –∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç."
        )
    
    elif "–ª–∞–≥–µ—Ä" in text:
        await update.message.reply_text(
            "–õ–∞–≥–µ—Ä - —ç—Ç–æ –ø–∏–≤–æ –Ω–∏–∑–æ–≤–æ–≥–æ –±—Ä–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö. "
            "–ü—Ä–æ—Ü–µ—Å—Å —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —á–∞–Ω–∞, –æ—Ç—Å—é–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ '–Ω–∏–∑–æ–≤–æ–µ'. "
            "–õ–∞–≥–µ—Ä—ã –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ –ª–µ–≥–∫–∏–µ –∏ –æ—Å–≤–µ–∂–∞—é—â–∏–µ, —á–µ–º —ç–ª–∏."
        )
    
    elif "—ç–ª—å" in text:
        await update.message.reply_text(
            "–≠–ª—å - —ç—Ç–æ –ø–∏–≤–æ –≤–µ—Ä—Ö–æ–≤–æ–≥–æ –±—Ä–æ–∂–µ–Ω–∏—è. –ü—Ä–æ—Ü–µ—Å—Å —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö, "
            "—á–µ–º —É –ª–∞–≥–µ—Ä–∞, –∏ –¥—Ä–æ–∂–∂–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —á–∞–Ω–∞. –≠–ª–∏ –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π, "
            "—Ñ—Ä—É–∫—Ç–æ–≤—ã–π –≤–∫—É—Å –∏ –∞—Ä–æ–º–∞—Ç."
        )
    
    elif "—Å—Ç–∞—É—Ç" in text:
        await update.message.reply_text(
            "–°—Ç–∞—É—Ç - —ç—Ç–æ —Ç—ë–º–Ω–æ–µ –ø–∏–≤–æ, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∂–∞—Ä–µ–Ω–æ–≥–æ —è—á–º–µ–Ω—è. "
            "–ò–º–µ–µ—Ç –±–æ–≥–∞—Ç—ã–π, –ø–ª–æ—Ç–Ω—ã–π –≤–∫—É—Å —Å –Ω–æ—Ç–∞–º–∏ –∫–æ—Ñ–µ, —à–æ–∫–æ–ª–∞–¥–∞ –∏ —Å–æ–ª–æ–¥–∞. "
            "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ç–µ—Ä–º–∏–Ω '—Å—Ç–∞—É—Ç' –æ–∑–Ω–∞—á–∞–ª –ø—Ä–æ—Å—Ç–æ '–∫—Ä–µ–ø–∫–∏–π –ø–∏–≤–æ'."
        )
    
    elif "–ø–æ—Ä—Ç–µ—Ä" in text:
        await update.message.reply_text(
            "–ü–æ—Ä—Ç–µ—Ä - —ç—Ç–æ —Ç—ë–º–Ω–æ–µ –ø–∏–≤–æ, –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ —Å—Ç–∞—É—Ç–∞. –ü–æ–ª—É—á–∏–ª –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–∏ "
            "–ª–æ–Ω–¥–æ–Ω—Å–∫–∏—Ö –Ω–æ—Å–∏–ª—å—â–∏–∫–æ–≤ (porter –≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ - –Ω–æ—Å–∏–ª—å—â–∏–∫). "
            "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è —Å–ª–æ–∂–Ω—ã–º –≤–∫—É—Å–æ–º —Å –Ω–æ—Ç–∞–º–∏ –∫–∞—Ä–∞–º–µ–ª–∏, —à–æ–∫–æ–ª–∞–¥–∞ –∏ –∏–Ω–æ–≥–¥–∞ –ª—ë–≥–∫–æ–π –¥—ã–º–Ω–æ—Å—Ç—å—é."
        )
    
    elif "–ø—à–µ–Ω–∏—á–Ω–æ–µ" in text:
        await update.message.reply_text(
            "–ü—à–µ–Ω–∏—á–Ω–æ–µ –ø–∏–≤–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–ª–∏ –ø—à–µ–Ω–∏—á–Ω–æ–≥–æ —Å–æ–ª–æ–¥–∞. "
            "–û–±—ã—á–Ω–æ –ª–µ–≥–∫–æ–µ, –æ—Å–≤–µ–∂–∞—é—â–µ–µ, —Å –≤—ã—Å–æ–∫–æ–π –∫–∞—Ä–±–æ–Ω–∏–∑–∞—Ü–∏–µ–π. –ù–µ–º–µ—Ü–∫–∏–µ —Å–æ—Ä—Ç–∞ (Weissbier) —á–∞—Å—Ç–æ –∏–º–µ—é—Ç "
            "–Ω–æ—Ç—ã –±–∞–Ω–∞–Ω–∞ –∏ –≥–≤–æ–∑–¥–∏–∫–∏ –∏–∑-–∑–∞ –æ—Å–æ–±—ã—Ö —à—Ç–∞–º–º–æ–≤ –¥—Ä–æ–∂–∂–µ–π."
        )
    
    elif "–∞–ª–∫–æ–≥–æ–ª—å" in text or "–≥—Ä–∞–¥—É—Å" in text:
        await update.message.reply_text(
            "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤ –ø–∏–≤–µ –æ–±—ã—á–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç 3% –¥–æ 12%. "
            "–õ–µ–≥–∫–æ–µ –ø–∏–≤–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-4%, –æ–±—ã—á–Ω—ã–µ –ª–∞–≥–µ—Ä—ã - –æ–∫–æ–ª–æ 5%, "
            "–∫—Ä–∞—Ñ—Ç–æ–≤—ã–µ —Å–æ—Ä—Ç–∞ —á–∞—Å—Ç–æ –∏–º–µ—é—Ç 6-9%, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Ä—Ç–∞ –º–æ–≥—É—Ç "
            "–¥–æ—Å—Ç–∏–≥–∞—Ç—å 12% –∏ –≤—ã—à–µ. –ü–æ–º–Ω–∏—Ç–µ –æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏!"
        )
    
    elif "–∑–∞–∫—É—Å–∫–∞" in text or "–∑–∞–∫—É—Å—ã–≤–∞—Ç—å" in text:
        await update.message.reply_text(
            "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏ –∫ –ø–∏–≤—É –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç—Ä–∞–Ω—ã –∏ —Å–æ—Ä—Ç–∞ –ø–∏–≤–∞. "
            "–ö –ª–∞–≥–µ—Ä–∞–º —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥—è—Ç —Å–Ω–µ–∫–∏, –æ—Ä–µ—à–∫–∏, –ª–µ–≥–∫–∏–µ —Å—ã—Ä—ã. –ö —ç–ª—è–º - –±–æ–ª–µ–µ –æ—Å—Ç—Ä—ã–µ "
            "–∏ –ø–∏–∫–∞–Ω—Ç–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏. –ö —Å—Ç–∞—É—Ç–∞–º - —à–æ–∫–æ–ª–∞–¥ –∏ –¥–µ—Å–µ—Ä—Ç—ã. "
            "–í –ì–µ—Ä–º–∞–Ω–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã –∫–æ–ª–±–∞—Å–∫–∏ –∏ –ø—Ä–µ—Ç—Ü–µ–ª–∏, –≤ –ë–µ–ª—å–≥–∏–∏ - —Å—ã—Ä—ã –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã."
        )
    
    # Fallback for unrecognized queries
    else:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ –∏–ª–∏ "
            "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã."
        )

def main() -> None:
    """Start the bot."""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = threading.Thread(target=run_web_server, daemon=True)
    web_thread.start()
    logger.info("Web server thread started")
    
    # Create the Application with more robust settings
    application = Application.builder().token(BOT_TOKEN).build()

    # Add command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("menu", menu_command))
    
    # Add callback query handler for inline keyboard buttons
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Add message handler for regular text messages
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Error handler to log errors
    async def error_handler(update, context):
        logger.error(f"Exception while handling an update: {context.error}")

    application.add_error_handler(error_handler)

    # Start the Bot with more reliable settings
    logger.info("Starting Telegram Beer Bot")
    application.run_polling(allowed_updates=Update.ALL_TYPES, 
                           drop_pending_updates=True,
                           pool_timeout=30,
                           read_timeout=30,
                           write_timeout=30)

if __name__ == "__main__":
    main()